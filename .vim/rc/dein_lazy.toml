
## Rust
#[[plugins]]
#repo = 'rust-lang/rust.vim'
#on_ft = ['rust']

# Golang
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

# # view for scroll (this is too slow in large file)
# [[plugins]]
# repo = 'wellle/context.vim'
# on_ft = ['javascript', 'typescript']

# Json Syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# Json Syntax
[[plugins]]
repo = 'leshill/vim-json'
on_ft = ['javascript']

# Javascript Syntax
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']

# Typescript Syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# JSX TSX Syntax
[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = ['javascript', 'typescript']

## Graphql Syntax
#[[plugins]]
#repo = 'jparise/vim-graphql'
#on_ft = ['javascript','graphql']

# LSP related
[[plugins]]
repo = 'dense-analysis/ale'
on_ft = [
  'javascript',
  'typescript',
  'html',
  'vue',
  #'rust',
]
hook_source = '''
  " w0rp/ale lints only on save
  " let g:ale_lint_on_enter = 0
  " let g:ale_lint_on_filetype_changed = 0
  let g:ale_lint_on_insert_leave = 0
  " let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  " use eslint only for javascript files
  let g:ale_linters = {}
  let g:ale_linters.javascript = ['eslint', 'tsserver']
  let g:ale_linters.typescript = ['eslint', 'tsserver']
  let g:ale_linters.rust = []
  " let g:ale_linters.rust = ['analyzer']
  let g:ale_linters.html = ['htmlhint']
  " completion
  let g:ale_completion_enabled = 1
  set omnifunc=ale#completion#OmniFunc
  " Put this in vimrc or a plugin file of your own.
  " After this is configured, :ALEFix will try and fix your JS code with ESLint.
  let g:ale_fixers = {
    \   'javascript': ['eslint'],
    \   'typescript': ['eslint'],
    \   'vue': ['eslint'],
    \}
'''

# vue syntax highlight
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_source = '''
  let g:vue_pre_processors = []
'''

# LSP related
[[plugins]]
repo = 'neoclide/coc.nvim'
on_ft = ['rust']
#on_ft = []
merged = 0
rev = 'release'
hook_source = '''
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <C-_>p <Plug>(coc-diagnostic-prev)
nmap <silent> <C-_>n <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> <C-_>d <Plug>(coc-definition)
nmap <silent> <C-_>t <Plug>(coc-type-definition)
nmap <silent> <C-_>i <Plug>(coc-implementation)
nmap <silent> <C-_>r <Plug>(coc-references)
" Hover
nnoremap <silent> <C-_>h :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" color
highlight CocErrorSign ctermbg=Red  guifg=#ff0000
highlight CocWarningSign ctermbg=Brown guifg=#ff922b
highlight CocInfoSign ctermbg=Yellow guifg=#fab005
highlight CocHintSign ctermbg=Blue  guifg=#15aabf
highlight FgCocErrorFloatBgCocFloating ctermfg=Red ctermbg=White
"highlight FgCocHintFloatBgCocFloating ctermfg=Blue ctermbg=White
"highlight CocErrorFloat ctermfg=White  guifg=#000000
"highlight CocWarningFloat ctermfg=White  guifg=#000000
"highlight CocInfoFloat ctermfg=White  guifg=#000000
"highlight CocHintFloat ctermfg=White  guifg=#000000
highlight link CocErrorHighlight SpellBad
highlight link CocWarningHighlight SpellCap
highlight link CocHintHighlight SpellCap
highlight link CocInfoHighlight SpellCap
'''

## Runner
#[[plugins]]
#repo = 'thinca/vim-quickrun'
#on_ft = ['javascript']

## Explorer
#[[plugins]]
#repo = 'junegunn/fzf'
#build = './install --all'
#merged = 0
#[[plugins]]
#repo = 'junegunn/fzf.vim'
#depends = 'fzf'
#on_cmd = ['FZF']
